================================================================================
                    PH√ÇN T√çCH QU√Å TR√åNH SAVE FILE LIS
                           Flutter LIS Parser
                          Generated: 2025-10-21
================================================================================

üîÑ T·ªîNG QUAN QUY TR√åNH:
H·ªá th·ªëng LIS parser c√≥ 3 method save ch√≠nh ƒë·ªÉ x·ª≠ l√Ω c√°c t√¨nh hu·ªëng kh√°c nhau:

================================================================================
1Ô∏è‚É£ saveDataFormatSpecToLIS() - Save metadata
================================================================================

M·ª§C ƒê√çCH: 
Ghi ƒë√® DataFormatSpec record (type 64) v√†o file LIS g·ªëc

QUY TR√åNH:
1. Ki·ªÉm tra file ƒë√£ m·ªü v√† dataFSRIdx h·ª£p l·ªá
2. T√¨m LisRecord t·∫°i v·ªã tr√≠ dataFSRIdx  
3. Serialize DataFormatSpec th√†nh bytes:
   - dataRecordType, datumSpecBlockType
   - dataFrameSize, direction, opticalDepthUnit
   - dataRefPoint, frameSpacing, absentValue
   - depthRecordingMode, depthUnit, depthRepr
4. Ghi ƒë√® tr·ª±c ti·∫øp v√†o file t·∫°i lisRecord.addr
5. Return success/failure

CODE LOCATION: lib/services/lis_file_parser.dart:19-59

================================================================================
2Ô∏è‚É£ saveLISWithDeletedRecords() - Save with deleted rows
================================================================================

M·ª§C ƒê√çCH: 
T·∫°o file LIS m·ªõi lo·∫°i b·ªè c√°c data records b·ªã ƒë√°nh d·∫•u x√≥a

QUY TR√åNH:
1. X√°c ƒë·ªãnh deleted rows t·ª´ _pendingChanges (type='delete')
2. T·∫°o newLisRecords: gi·ªØ nguy√™n non-data records + data records kh√¥ng b·ªã x√≥a
3. Rebuild BlankRecord structure v·ªõi ƒë·ªãa ch·ªâ m·ªõi
4. Serialize t·ª´ng record:
   - Ghi BlankRecord header (16 bytes)
   - Ghi LisRecord data 
5. Save to√†n b·ªô v√†o file m·ªõi
6. Update internal state (fileName, blankRecords, lisRecords)

CODE LOCATION: lib/services/lis_file_parser.dart:114-184

================================================================================
3Ô∏è‚É£ savePendingChanges() - Save data edits
================================================================================

M·ª§C ƒê√çCH: 
√Åp d·ª•ng t·∫•t c·∫£ pending changes (edit + delete) v√†o file m·ªõi

QUY TR√åNH CH√çNH:

Phase 1: Preparation
--------------------
1. Read to√†n b·ªô file g·ªëc v√†o memory (originalBytes)
2. T·∫°o modifiedBytes copy
3. X√°c ƒë·ªãnh deletedRows t·ª´ _pendingChanges
4. L·∫•y danh s√°ch dataRecords c·∫ßn gi·ªØ l·∫°i

Phase 2: Apply Changes
----------------------
For each pending change (kh√¥ng ph·∫£i 'delete'):
  1. Extract change info: recordIndex, frameIndex, newValue, datum
  2. G·ªçi _updateBytesInMemory() ƒë·ªÉ modify bytes in-place

Phase 3: Write Result
---------------------
1. Write modifiedBytes v√†o file m·ªõi (*_modified.lis)
2. Update file handle to new file
3. Clear _pendingChanges
4. Close old file

CODE LOCATION: lib/services/lis_file_parser.dart:2026-2135

================================================================================
üõ†Ô∏è _updateBytesInMemory() - Core editing logic
================================================================================

T√çNH TO√ÅN V·ªä TR√ç BYTE CH√çNH X√ÅC:

1. Base offset:
   - Russian LIS: +2 (skip record length)
   - NTI format: +6 (skip header)

2. Frame offset: 
   byteOffset += frameIndex * dataFrameSize

3. Datum offset:
   - Loop qua datumBlocks t·ª´ ƒë·∫ßu ƒë·∫øn target datum
   - C·ªông d·ªìn size c·ªßa t·ª´ng datum
   - Th√™m 4 bytes correction (match v·ªõi parsing logic)

4. Final position:
   filePosition = lisRecord.addr + byteOffset

ENCODE/DECODE VALUES:
- _decodeValue(): ƒê·ªçc bytes th√†nh double (verify)
- _encodeValue(): Convert double th√†nh bytes theo reprCode
- _encodeRussianLisFloat(): Custom encoder cho reprCode 68

CODE LOCATION: lib/services/lis_file_parser.dart:2136-2297

================================================================================
üß© VALUE ENCODING BY REPRCODE
================================================================================

ReprCode | Type                    | Encoding Method
---------|-------------------------|------------------------------------------
68       | 4-byte Russian LIS Float| _encodeRussianLisFloat() - Custom algorithm
73       | 4-byte Integer          | ByteData.setInt32() Little Endian
70       | 4-byte IBM Float        | ByteData.setFloat32() Big Endian  
49       | 2-byte Float            | (value * 100).setInt16() Little Endian
79       | 2-byte Integer          | ByteData.setInt16() Little Endian

================================================================================
üîê RUSSIAN LIS FLOAT ENCODING (REPRCODE 68)
================================================================================

ALGORITHM STEPS:
1. Handle zero case: return [0,0,0,0]
2. Extract sign bit, calculate absolute value
3. Normalize fraction to [0.5, 1.0) range
4. Calculate exponent bits (127/128 base + adjustments)
5. Convert fraction to 23-bit mantissa using bit iteration
6. Apply complement for negative numbers
7. Assemble: sign(1) + exponent(8) + mantissa(23) bits
8. Extract as big-endian bytes [ch0, ch1, ch2, ch3]

CODE LOCATION: lib/services/lis_file_parser.dart:2371-2440

================================================================================
üìä DATA FLOW SUMMARY
================================================================================

User Edit ‚Üí _pendingChanges ‚Üí savePendingChanges() ‚Üí 
  _updateBytesInMemory() ‚Üí _encodeValue() ‚Üí 
    Modified File Bytes ‚Üí New LIS File

KEY FEATURES:
‚úÖ Non-destructive: T·∫°o file m·ªõi, kh√¥ng ghi ƒë√® file g·ªëc
‚úÖ Precision: Exact byte-level positioning matching parser logic  
‚úÖ Validation: Verify encoded values b·∫±ng decode ng∆∞·ª£c l·∫°i
‚úÖ Debug support: Extensive logging cho troubleshooting
‚úÖ Multi-format: Support c·∫£ Russian LIS v√† NTI format

================================================================================
üîß HELPER METHODS
================================================================================

_doubleToBytes(): Convert double to 8-byte array (Little Endian)
_decodeValue(): Read bytes and convert to double based on reprCode
_encodeValue(): Convert double to bytes based on reprCode
_encodeRussianLisFloat(): Custom encoding for Russian LIS float format

================================================================================
‚ö†Ô∏è CRITICAL NOTES
================================================================================

1. BYTE POSITIONING:
   - Must match exact parsing logic in getAllData()
   - 4-byte correction needed for proper alignment
   - Frame size calculation critical for multi-frame records

2. REPRCODE 68 ENCODING:
   - Custom algorithm specific to Russian LIS format
   - Different from standard IEEE 754 float
   - Requires precise bit manipulation

3. FILE SAFETY:
   - Always creates new file (*_modified.lis)
   - Original file remains untouched
   - Extensive validation before writing

4. PENDING CHANGES:
   - Supports both 'edit' and 'delete' operations
   - Changes accumulated in _pendingChanges Map
   - Batch processing for efficiency

================================================================================
üìÅ FILE STRUCTURE AFTER SAVE
================================================================================

Original File: data.lis
‚Üì
Modified File: data_modified.lis (contains all changes)
‚Üì
New File Handle: Points to modified file for continued operations

================================================================================
üêõ DEBUG INFORMATION
================================================================================

Extensive debug logging includes:
- File positions and byte offsets
- Value encoding/decoding verification  
- Record indexing and frame calculations
- Byte-level hex dumps for verification
- Before/after value comparisons

All debug statements can be found throughout the save methods for
troubleshooting and verification purposes.

================================================================================
                             END OF ANALYSIS
================================================================================